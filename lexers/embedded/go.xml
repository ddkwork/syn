<lexer>
  <config>
    <name>Go</name>
    <alias>go</alias>
    <alias>golang</alias>
    <filename>*.go</filename>
    <mime_type>text/x-gosrc</mime_type>
    <ensure_nl>true</ensure_nl>
  </config>
  <rules>
    <state name="root">
      <rule pattern="\n">
        <token type="Text"/>
      </rule>
      <rule pattern="\s+">
        <token type="Text"/>
      </rule>
      <rule pattern="\\\n">
        <token type="Text"/>
      </rule>
      <rule pattern="//(.*?)\n">
        <token type="CommentSingle"/>
      </rule>
      <rule pattern="/(\\\n)?[*](.|\n)*?[*](\\\n)?/">
        <token type="CommentMultiline"/>
      </rule>
      <rule pattern="(import|package)\b">
        <token type="KeywordNamespace"/>
      </rule>
      <rule pattern="(var|func|struct|map|chan|type|interface|const)\b">
        <token type="KeywordDeclaration"/>
      </rule>
      <rule pattern="(break|default|select|case|defer|go|else|goto|switch|fallthrough|if|range|continue|for|return)\b">
        <token type="Keyword"/>
      </rule>
      <rule pattern="(true|false|iota|nil)\b">
        <token type="KeywordConstant"/>
      </rule>
      <rule pattern="(uint|uint8|uint16|uint32|uint64|int|int8|int16|int32|int64|float|float32|float64|complex64|complex128|byte|rune|string|bool|error|uintptr|print|println|panic|recover|close|complex|real|imag|len|cap|append|copy|delete|new|make)\b(\()">
        <bygroups>
          <token type="NameBuiltin"/>
          <token type="Punctuation"/>
        </bygroups>
      </rule>
      <rule pattern="(uint|uint8|uint16|uint32|uint64|int|int8|int16|int32|int64|float|float32|float64|complex64|complex128|byte|rune|string|bool|error|uintptr)\b">
        <token type="KeywordType"/>
      </rule>
      <rule pattern="\d+i">
        <token type="LiteralNumber"/>
      </rule>
      <rule pattern="\d+\.\d*([Ee][-+]\d+)?i">
        <token type="LiteralNumber"/>
      </rule>
      <rule pattern="\.\d+([Ee][-+]\d+)?i">
        <token type="LiteralNumber"/>
      </rule>
      <rule pattern="\d+[Ee][-+]\d+i">
        <token type="LiteralNumber"/>
      </rule>
      <rule pattern="\d+(\.\d+[eE][+\-]?\d+|\.\d*|[eE][+\-]?\d+)">
        <token type="LiteralNumberFloat"/>
      </rule>
      <rule pattern="\.\d+([eE][+\-]?\d+)?">
        <token type="LiteralNumberFloat"/>
      </rule>
      <rule pattern="0[0-7]+">
        <token type="LiteralNumberOct"/>
      </rule>
      <rule pattern="0[xX][0-9a-fA-F_]+">
        <token type="LiteralNumberHex"/>
      </rule>
      <rule pattern="0b[01_]+">
        <token type="LiteralNumberBin"/>
      </rule>
      <rule pattern="(0|[1-9][0-9_]*)">
        <token type="LiteralNumberInteger"/>
      </rule>
      <rule pattern="'(\\['&#34;\\abfnrtv]|\\x[0-9a-fA-F]{2}|\\[0-7]{1,3}|\\u[0-9a-fA-F]{4}|\\U[0-9a-fA-F]{8}|[^\\])'">
        <token type="LiteralStringChar"/>
      </rule>
      <rule pattern="`[^`]*`">
        <token type="LiteralString"/>
      </rule>
      <rule pattern="&#34;(\\\\|\\&#34;|[^&#34;])*&#34;">
        <token type="LiteralString"/>
      </rule>
      <rule pattern="(&lt;&lt;=|&gt;&gt;=|&lt;&lt;|&gt;&gt;|&lt;=|&gt;=|&amp;\^=|&amp;\^|\+=|-=|\*=|/=|%=|&amp;=|\|=|&amp;&amp;|\|\||&lt;-|\+\+|--|==|!=|:=|\.\.\.|[+\-*/%&amp;])">
        <token type="Operator"/>
      </rule>
      <rule pattern="([a-zA-Z_]\w*)(\s*)(\()">
        <bygroups>
          <token type="NameFunction"/>
          <usingself state="root"/>
          <token type="Punctuation"/>
        </bygroups>
      </rule>
      <rule pattern="[|^&lt;&gt;=!()\[\]{}.,;:]">
        <token type="Punctuation"/>
      </rule>
      <rule pattern="[^\W\d]\w*">
        <token type="NameOther"/>
      </rule>
    </state>
  </rules>
</lexer>

